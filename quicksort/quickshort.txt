Quickshort é um algoritmo de ordenação, porém o quickshort é mais rápido que o mesmo e utiliza a estratégia DC (Dividir para Conquistar)

PENSANDO NO CASO DE UMA ORDENAÇÃO DE UM ARRAY:

caso-base: arrays vazios, arrays com 1 elemento, arrays com 2 elementos

O quickshort segue a seguinte lógica: Primeiro escolhemos um elemento do array e ele será nosso pivô
Após isso precisamos encontrar no array os numeros que são menores e maiores que o nosso pivô e separá-los em subarrays (PARTICIONAMENTO)

ARRAY - [40, 20, 70, 30]
PIVÔ - 20

[] -- |20| -- [40, 70, 30]

Porém os subarrays não estão ordenados, apenas particionados. Caso eles estivessem ordenadas a ordenação do array por completo seria mais simples

array esquerdo + pivô + array direito = array ordenado
[] + [20] + [30, 40, 70] = [20, 30, 40, 70] 

Sendo assim executamos o quickshort para esses subarrays também (RECURSIVIDADE)

quickshort([]) + [20] + quickshort([40, 70, 30]) = [20, 30, 40, 70]
------------------------------------------------------------------------------------------------------------------------------------------
EXECUÇÃO DO QUICKSHORT:
[] -- |20| -- [40, 70, 30]
[] -- |20| -- [40, 70, 30] => [] -- |30| -- [40, 70]
[] -- |20| -- [40, 70, 30] => [] -- |30| -- [40, 70] => [] -- |40| -- [70]

[] + [40] + [70] = [40, 70]
[] -- |20| -- [40, 70, 30] => [] -- |30| -- [40, 70] => [40, 70]

[] + [30] + [40, 70] = [30, 40, 70]
[] -- |20| -- [40, 70, 30] => [30, 40, 70]

[] + [20] + [30, 40, 70] = [20, 30, 40, 70]
[20, 30, 40, 70]